# O(n) - space complexity
# 1st method

class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        num = []
        nums1 = nums[n:]
        del nums[n:]
        while len(nums1) != 0:
            num.append(nums[0])
            num.append(nums1[0])
            nums.pop(0)
            nums1.pop(0)
        return num

#2nd method
        
def shuffle_array(nums, n, size):
    res = []
    l=len(res)
    i=0
    for i in range(n):
        res.append(nums[i])
        res.append(nums[n+i])
    return res


if __name__ == '__main__':
    nums = list(map(int, input().split()))
    n = int(input())
    print(shuffle_array(nums, n, len(nums)))
    
# 3rd method

def shuffle_array(nums, n, size):
    result = [0]*len(nums)
    for i in range(n):
        index = 2*i
        result[index] = nums[i]
        result[index+1] = nums[i+n]
    return result


if __name__ == '__main__':
    nums = list(map(int, input().split()))
    n = int(input())
    print(shuffle_array(nums, n, len(nums)))
