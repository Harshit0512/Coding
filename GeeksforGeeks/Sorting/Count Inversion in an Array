Inversion forms when i < j and arr[i] > arr[j]

# Naive Solution

def inversion_in_array(arr, n):
    res = 0
    for i in range(0, n-1):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                res += 1
    return res


if __name__ == '__main__':
    arr = list(map(int, input().split()))
    print(inversion_in_array(arr, len(arr)))
    
# Efficient Solution

def count_inversion(arr, n): 
    temp_arr = [0]*n 
    return _mergeSort(arr, temp_arr, 0, n-1) 
  
def _mergeSort(arr, temp_arr, left, right): 
    inv_count = 0
    if left < right: 
        mid = (left + right)//2
        inv_count += _mergeSort(arr, temp_arr, left, mid)  
        inv_count += _mergeSort(arr, temp_arr, mid + 1, right) 
        inv_count += merge(arr, temp_arr, left, mid, right) 
    return inv_count 

def merge(arr, temp_arr, left, mid, right): 
    i = left   
    j = mid + 1 
    k = left
    inv_count = 0
  
    while i <= mid and j <= right: 
        if arr[i] <= arr[j]: 
            temp_arr[k] = arr[i] 
            k += 1
            i += 1
        else: 
            temp_arr[k] = arr[j] 
            inv_count += (mid-i + 1) 
            k += 1
            j += 1
 
    while i <= mid: 
        temp_arr[k] = arr[i] 
        k += 1
        i += 1

    while j <= right: 
        temp_arr[k] = arr[j] 
        k += 1
        j += 1

    for i in range(left, right + 1): 
        arr[i] = temp_arr[i] 
          
    return inv_count 


if __name__ == '__main__':
    arr = list(map(int, input().split()))
    print(count_inversion(arr, len(arr)))
