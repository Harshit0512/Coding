We have elements >= 0
The values are heights of bars.
If our array is in increasing or decreasing order output will be 0.

# O(n*n) - time complexity
# O(n) - space complexity

def maxWater(arr, n): 
 
    res = 0
    
    for i in range(1, n - 1):    
        left = arr[i];  
        for j in range(i): 
            left = max(left, arr[j])  
  
        right = arr[i]   
        for j in range(i + 1 , n):  
            right = max(right, arr[j])
        res = res + (min(left, right) - arr[i])  
  
    return res  
  

if __name__ == "__main__":
    t = int(input())
    for i in range(t):
        arr = list(map(int, input().split()))  
        n = len(arr)  
        print(maxWater(arr, n))
        
# O(n) - time complexity
# O(1) - space complexity

def maxWater(arr, n): 
 
    result = 0 
    left_max = 0
    right_max = 0

    low = 0
    high = n-1
       
    while(low <= high):  
        if(arr[low] < arr[high]): 
            if(arr[low] > left_max): 
                left_max = arr[low] 
            else:  
                result += left_max - arr[low] 
            low+= 1
        else: 
            if(arr[high] > right_max): 
                right_max = arr[high] 
            else: 
                result += right_max - arr[high] 
            high-= 1
          
    return result 
   
if __name__ == "__main__":
    t = int(input())
    for i in range(t):
        arr = list(map(int, input().split()))  
        n = len(arr)  
        print(maxWater(arr, n))
