# Naive solution - O(n)
Aux space - O(1)

def first_occurrence(arr, k):
    if k in arr:
        return arr.index(k)
    else:
        return -1

if __name__ == '__main__':
    arr = list(map(int, input().split()))
    k = int(input())
    print(first_occurrence(arr, k))
    
# Better approach - using Binary Search (Recursive)
# O(log*n)
# Aux space = O(n)

def first_occurrence(arr, k, low, high):
    if low > high:
        return -1
    mid = (low+ high) // 2
    if arr[mid] > k:
        return first_occurrence(arr, k, low, mid-1)
    elif arr[mid] < k:
        return first_occurrence(arr, k, mid+1, high)
    else:
        if (mid == 0 or arr[mid-1] != arr[mid]):
            return mid
        else:
            return first_occurrence(arr, k, low, mid-1)
        
if __name__ == '__main__':
    arr = list(map(int, input().split()))
    k = int(input())
    n = len(arr)
    print(first_occurrence(arr, k, 0, n-1))
    
# Much more better - using Binary Search (Iterative)
def binary_search(arr, k):
    n = len(arr)
    low = 0
    high = n-1
    
    while low <= high:
        mid = (low + high)//2
        if arr[mid] > k:
            high = mid - 1
        elif arr[mid] < k:
            low = mid + 1
        else:
            if (mid == 0 or arr[mid-1] != arr[mid]):
                return mid
            else:
                high = mid -1
    return -1

if __name__ == '__main__':
    arr = list(map(int, input().split()))
    k = int(input())
    print(binary_search(arr, k))
