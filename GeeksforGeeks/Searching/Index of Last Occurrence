# Binary Search (Recursive)

def last_occurrence(arr, k, low, high):
    if low > high:
        return -1
    mid = (low+ high) // 2
    if arr[mid] > k:
        return last_occurrence(arr, k, low, mid-1)
    elif arr[mid] < k:
        return last_occurrence(arr, k, mid+1, high)
    else:
        if (mid == n-1 or arr[mid] != arr[mid+1]):
            return mid
        else:
            return last_occurrence(arr, k, mid+1, high)
        
if __name__ == '__main__':
    arr = list(map(int, input().split()))
    k = int(input())
    n = len(arr)
    print(last_occurrence(arr, k, 0, n-1))
 
# Binary Search (Iterative)

def last_occurrence(arr, k):
    n = len(arr)
    low = 0
    high = n-1
    
    while low <= high:
        mid = (low + high)//2
        if arr[mid] > k:
            high = mid - 1
        elif arr[mid] < k:
            low = mid + 1
        else:
            if (mid == n-1 or arr[mid] != arr[mid+1]):
                return mid
            else:
                low = mid + 1
    return -1

if __name__ == '__main__':
    arr = list(map(int, input().split()))
    k = int(input())
    print(last_occurrence(arr, k))
